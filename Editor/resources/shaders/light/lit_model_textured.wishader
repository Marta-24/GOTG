{"vertex":"#version 330 core\n\n// Positions/Coordinates\nlayout (location = 0) in vec3 aPos;\n// Normals\nlayout (location = 1) in vec3 aNormal;\n// Texture Coordinates\nlayout (location = 2) in vec2 aTex;\n\nout vec3 Normal;\nout vec3 LocalPos;\nout vec2 TexCoord;\n\nuniform mat4 u_Model;\nuniform mat4 u_Proj;\nuniform mat4 u_View;\n\nvoid main()\n{\n\tgl_Position = u_Proj * u_View * u_Model * vec4(aPos, 1.0);\n\tTexCoord = aTex;\n\tNormal = aNormal;\n\tLocalPos = aPos;\n}\n","fragment":"#version 330 core\n#define MAX_POINT_LIGHTS 128\n\nout vec4 FragColor;\n\nin vec2 TexCoord;\nin vec3 Normal;\nin vec3 LocalPos;\n\nstruct BaseLight\n{\n    vec3 Color;\n    float AmbientIntensity;\n    float DiffuseIntensity;\n};\n\nstruct DirectionalLight\n{\n    BaseLight Base;\n    vec3 Direction;\n};\n\nstruct Attenuation\n{\n    float Constant;\n    float Linear;\n    float Exp;\n};\n\nstruct PointLight\n{\n    BaseLight Base;\n    vec3 LocalPos;\n    Attenuation Atten;\n};\n\nuniform vec4 u_MatAmbientColor;\nuniform vec4 u_MatDiffuseColor;\nuniform vec4 u_MatSpecularColor;\n\nuniform DirectionalLight u_DirectionalLight;\nuniform PointLight[MAX_POINT_LIGHTS] u_PointLights;\nuniform int u_NumPointLights;\n\nuniform sampler2D u_Texture;\nuniform float u_SpecularValue;\nuniform vec3 u_CameraPosition;\n\nvec4 CalcLightInternal(BaseLight light, vec3 direction, vec3 normal)\n{\n    vec4 ambientColor = vec4(light.Color, 1.0f) * light.AmbientIntensity * u_MatAmbientColor;\n\n    float diffuseFactor = dot(normal, -direction);\n\n    vec4 diffuseColor = vec4(0, 0, 0, 0);\n    vec4 specularColor = vec4(0, 0, 0, 0);\n\n    if(diffuseFactor > 0) \n    {\n        diffuseColor = vec4(light.Color, 1.0f) * light.DiffuseIntensity * u_MatDiffuseColor * diffuseFactor;\n\n        vec3 pixelToCamera = normalize(u_CameraPosition - LocalPos);\n        vec3 lightReflect = normalize(reflect(direction, normal));\n        float specularFactor = dot(pixelToCamera, lightReflect);\n\n        if(specularFactor > 0)\n        {\n            specularFactor = pow(specularFactor, u_SpecularValue);\n            specularColor = vec4(light.Color, 1.0f) * light.DiffuseIntensity * u_MatSpecularColor * specularFactor;\n        }\n    }\n\n    return ambientColor + diffuseColor + specularColor;\n}\n\nvec4 CalcDirectionalLight(vec3 normal)\n{\n    return CalcLightInternal(u_DirectionalLight.Base, u_DirectionalLight.Direction, normal);\n}\n\nvec4 CalcPointLight(int index, vec3 normal)\n{\n    vec3 lightDirection = u_PointLights[index].LocalPos - LocalPos;\n    float distance = length(lightDirection);\n    lightDirection = normalize(lightDirection);\n\n    vec4 color = CalcLightInternal(u_PointLights[index].Base, lightDirection, normal);\n\n    float attenuation = u_PointLights[index].Atten.Constant +\n                        u_PointLights[index].Atten.Linear * distance *\n                        u_PointLights[index].Atten.Exp * distance * distance;\n\n    return color / attenuation;\n}\n\nvoid main()\n{\n    vec3 normal = normalize(Normal);\n    vec4 totalLight = CalcDirectionalLight(normal);\n\n    for(int i = 0; i < u_NumPointLights; i++)\n    {\n        totalLight += CalcPointLight(i, normal);\n    }\n\n    FragColor = texture2D(u_Texture, TexCoord.xy) *\n                totalLight;\n}","uniforms":{"u_Texture":11,"u_SpecularValue":3,"u_MatAmbientColor":6,"u_MatDiffuseColor":6,"u_MatSpecularColor":6}}